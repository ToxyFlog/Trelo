apiVersion: v1
kind: PersistentVolume
metadata:
  name: volume
spec:
  capacity:
    storage: 20Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  storageClassName: hostpath
  hostPath:
    path: /Desktop/pgdata
  persistentVolumeReclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-volume-claim
spec:
  storageClassName: hostpath
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: react-service
spec:
  selector:
    app: react
  ports:
    - protocol: TCP
      targetPort: 80
      port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: node-service
spec:
  selector:
    app: node
  ports:
    - protocol: TCP
      targetPort: 3000
      port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      targetPort: 6379
      port: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      targetPort: 5432
      port: 5432


---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: nginx
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    nginx.org/websocket-services: "node-service"
spec:
  ingressClassName: nginx
  defaultBackend:
    service:
      name: react-service
      port:
        number: 80
  rules:
    - http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: node-service
                port:
                  number: 80
    - http:
        paths:
          - path: /ws
            pathType: Prefix
            backend:
              service:
                name: node-service
                port:
                  number: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-deployment
spec:
  # Replica set:
  replicas: 3
  selector:
    matchLabels:
      app: react
  # Pod:
  template:
    metadata:
      labels:
        app: react
    spec:
      # Container:
      containers:
        - name: trelo
          image: trelo:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-deployment
spec:
  # Replica set:
  replicas: 3
  selector:
    matchLabels:
      app: node
  # Pod:
  template:
    metadata:
      labels:
        app: node
    spec:
      # Container:
      containers:
        - name: trelo-back
          imagePullPolicy: Never
          image: trelo-back:latest
          ports:
            - containerPort: 3000
      initContainers:
        - name: wait-for-psql
          image: alpine
          command: [ '/bin/sh', '-c', "until nslookup postgres-service.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for postgres; sleep 2; done" ]
        - name: wait-for-redis
          image: alpine
          command: [ '/bin/sh', '-c', "until nslookup redis-service.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for redis; sleep 2; done" ]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  # Replica set:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  # Pod:
  template:
    metadata:
      labels:
        app: redis
    spec:
      # Container:
      containers:
        - name: redis
          image: redis:6.2.6-alpine
          command: [ "/bin/sh", "-c", "redis-server --requirepass SomePassword" ]
          ports:
            - containerPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  # Replica set:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  # Pod:
  template:
    metadata:
      labels:
        app: postgres
    spec:
      # Volume:
      volumes:
        - name: postgres-volume
          persistentVolumeClaim:
            claimName: postgres-volume-claim
      # Container:
      containers:
        - name: postgres
          image: postgres:14.2-alpine
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-volume
              mountPath: /data
          env:
            - name: POSTGRES_USER
              value: SomeUser
            - name: POSTGRES_PASSWORD
              value: SomePassword
            - name: POSTGRES_DB
              value: trelo
            - name: PGDATA
              value: /data/pgdata